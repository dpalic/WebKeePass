/**
 * <p>Title: [ClassName/] </p>
 * <p>Description: [Description/] </p>
 *
 * 
 * @author  [User/]
 * @version 1.0
 */


/*
Class Description:
[Comments/]  
*/


/*
Tables/Data :
[TableDescription/]  
*/



import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;

import webBoltOns.dataContol.DataAccess;
import webBoltOns.dataContol.DataSet;
import webBoltOns.dataContol.StandardTableDefinition;


public class [ClassName/] {


	
 public [ClassName/]() {}
 
[Start-GetMethod/]
 
 /*[GetMethodComment/]*/
 public DataSet get[TableName/](DataSet dataSet, DataAccess dataAccss) {     
	 try {
    	  if(dataAccss.executeQuery(
          		"Select * From [TableName/] Where [KeyField1/] = [KeyDelimiter1/]" + 
					dataSet.getStringField("[KeyField1/]") + "[KeyDelimiter1/] " , "[TableName/]" ,dataSet))
    	
    	  else  
    		  dataSet.addMessage("Record Not found", "30", "FirstName", null);
      
    } catch (Exception exception) {
      dataSet.addMessage("Database Error - Please contact systems administrator", "30", null, null);
    }
    return dataSet;
  }
  
[End-GetMethod/]




[Start-UpdateMethod/]
 
  /*[UpdateMethodComment/]*/ 

  public DataSet upd[TableName/](DataSet dataSet, DataAccess dataAccss) {
    if(edit[TableName/](dataSet,  dataAccss))
    	if(isNew[TableName/](dataSet ,dataAccss))
    		dataSet = insertInto[TableName/](dataSet,  dataAccss);
    	else 
    		dataSet = updateInto[TableName/](dataSet,  dataAccss);	
    return dataSet;
  }
   
 
  private boolean edit[TableName/](DataSet dataSet, DataAccess dataAccss){
	  return true;
  }


  public boolean isNew[TableName/](DataSet dataSet, DataAccess dataAccss){
     try {
    	 return !dataAccss.executeQuery(
     			"Select [KeyField1/] From [TableName/] Where [KeyField1/] = [KeyDelimiter1/]" + 
					dataSet.getStringField("[KeyField1/]") + "[KeyDelimiter1/] "  ,"", null);
       } catch (Exception exception) {
    	   return true;
       }     
  }
  
    public boolean isNew[TableName/](String key, DataAccess dataAccss){
     try {
    	 return !dataAccss.executeQuery(
     			"Select [KeyField1/] From [TableName/] Where [KeyField1/] = [KeyDelimiter1/]" + 
							key + "[KeyDelimiter1/] "  ,"", null);
       } catch (Exception exception) {
    	   return true;
       }     
  }
  
  
   private DataSet insertInto[TableName/](DataSet dataSet, DataAccess dataAccss) {
	  try {
		  	dataAccss.executeInsertQuery("[TableName/]", dataSet);   
  			dataSet.addMessage("Record Added", "10", null,  null);
	  } catch (Exception exception) {
  		kid.addMessage("Database Error - Please contact systems administrator", "30", null, null);
  	} 
  	return dataSet;
  }
  
  
  
  private DataSet updateInto[TableName/](DataSet dataSet, DataAccess dataAccss) {
  	try {
	   
	  	dataAccss.executeUpdateQuery("[TableName/]",  dataSet,   
	  			"Where [KeyField1/] = [KeyDelimiter1/]" + 
					dataSet.getStringField("[KeyField1/]") + "[KeyDelimiter1/] " );
  		  
  		dataSet.addMessage("Record Updated", "10", null, null);
  	} catch (Exception exception) {
  		dataSet.addMessage("Database Error - Please contact systems administrator", "30", null, null);
  	}
  	return dataSet;
  }
             

[End-UpdateMethod/]



[Start-DeleteMethod/]

  /*[DeleteMethodComment/]*/

  public DataSet del[TableName/](DataSet dataSet, DataAccess dataAccss) {
   Statement sqlStatement = dataAccss.execConnectUpdate();
     try {
       sqlStatement.executeUpdate(
       		"Delete from [TableName/] Where [KeyField1/] = [KeyDelimiter1/]" + 
       			 		dataSet.getStringField("[KeyField1/]" + "[KeyDelimiter1/] ");
       dataSet.addMessage("Record Deleted", "10", null, null);
     }  catch (Exception exception) {
     	dataSet.addMessage("Database Error - Please contact systems administrator", "30", null, null);
     } finally {
     	dataAccss.execClose(sqlStatement);
    }
     return dataSet;
  }
[End-DeleteMethod/]



[Start-GetNextMethod/]

 /*[GetNextMethodComment/]*/
 public DataSet nxt[TableName/](DataSet dataSet, DataAccess dataAccss) {
  try {
    	  if(dataAccss.executeQuery(
          		"Select * From [TableName/] Where [KeyField1/] > [KeyDelimiter1/]" + 
					dataSet.getStringField("[KeyField1/]") + "[KeyDelimiter1/] Order By [KeyField1/] " , "[TableName/]" ,dataSet))
    	
    	  else  
    		  dataSet.addMessage("At end of file", "30", "FirstName", null);
      
    } catch (Exception exception) {
      dataSet.addMessage("Database Error - Please contact systems administrator", "30", null, null);
    }
    return dataSet;
  }
[End-GetNextMethod/]



[Start-GetPrevMethod/]

  /*[GetPrevMethodComment/]*/
  public DataSet prv[TableName/](DataSet dataSet, DataAccess dataAccss) {
   try {
    	  if(dataAccss.executeQuery(
          		"Select * From [TableName/] Where [KeyField1/] < [KeyDelimiter1/]" + 
					dataSet.getStringField("[KeyField1/]") + "[KeyDelimiter1/] Order By [KeyField1/] Desc " , "[TableName/]" ,dataSet))
    	
    	  else  
    		  dataSet.addMessage("At end of file", "30", "FirstName", null);
      
    } catch (Exception exception) {
      dataSet.addMessage("Database Error - Please contact systems administrator", "30", null, null);
    }
    return dataSet;
   }
[End-GetPrevMethod/]




[Start-TableListMethod/]

  /*[TableListMethodComment/]*/

  public DataSet get[TableName/]List(DataSet dataSet, DataAccess dataAccss) {  
    Vector cstmrv1 = new Vector();
    String keyField1 = (String) dataSet.get("@[KeyField1/]");
    String[] tblCols = (String[]) dataSet.getTableColumnFields("Table1");
    ResultSet resultSet;
    Statement sqlStatement = dataAccss.execConnectReadOnly();;

    String sql = "Select " + dataAccss.buildArgumentList(tblCols) + "  From [TableName/] "; 
    sql = dataAccss.addToSearchWhereClause(sql,"[KeyField1/]", "CHR", keyField1);

    try {
      resultSet = sqlStatement.executeQuery(sql);
      while (resultSet.next()) {
        String[] row1 = new String[tblCols.length];
        for (int x = 0; x < tblCols.length; x++) 
          row1[x] = (String) dataAccss.getFieldValue(resultSet, tblCols[x], dataAccss.getDataType(tblCols[x]));
        
        cstmrv1.addElement(row1);

        }
        resultSet.close();
        dataSet.put("Table1", cstmrv1);

      } catch (Exception exception) {
         dataAccss.logMessage(" *[ClassName/].het[TableName/]List* -- " + exception);
      	 dataSet.addMessage("Database Error - Please contact systems administrator", "30", null, null);
      } finally {
      	dataAccss.execClose(sqlStatement);
    }
  return dataSet;
  }
[End-TableListMethod/]


[Start-TableUpdateMethod/]

  /*[TableUpdateMethodComment/]*/
 	public DataSet update[TableName/]List(DataSet dataSet, DataAccess dataAccss) {
		PreparedStatement qryI = dataAccss.execPreparedConnect("Insert Into [TableName/] (xxxxxx) Values ( ? )");
		PreparedStatement qryU = dataAccss.execPreparedConnect("Update [TableName/] SET xxxxx=? Where [KeyField1/] = ? ");
		Enumeration table = dataSet.getTableVector("Table1").elements();
		String[] tblCols = (String[]) dataSet.getTableColumnFields("Table1");
		dataSet.remove("Table1");
		try {
			while (table.hasMoreElements()) {
				String[] row = (String[]) table.nextElement();

				if (row[1] != null && !row[1].equals(""))
					if (isNewTableName/](row[0], dataAccss)) {
						qryI.setString(1, row[1]);
						qryI.executeUpdate();
					} else {
						qryU.setString(1, row[1]);
						qryU.setInt(2, row[0]);
						qryU.executeUpdate();
					}
			}

			dataSet.addMessage("Topic(s) Updated", "10", null, null);
		} catch (SQLException e) {
			dataAccss.logMessage(" [TableName/].update{TableName/]List* -- " + e);
			dataSet.addMessage("Database Error - Please contact systems administrator", "30", null, null);
		} finally {
			dataAccss.execClose(qryI);
			dataAccss.execClose(qryU);
		}

		return dataSet;
	}
	
	[End-TableUpdateMethod/]
}
